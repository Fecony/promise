app promise_app {
  wasp: {
    version: "^0.10.4"
  },
  title: "Developer Promises",
  dependencies: [
    ("@geist-ui/core", "^2.3.8"),
    ("@geist-ui/icons", "^1.0.2"),
    ("inter-ui", "^3.19.3"),
  ],
  client: {
    rootComponent: import Root from "@client/Root",
    setupFn: import mySetupFunction from "@client/clientSetup.js"
  },
  // auth: {
  //    methods: {
  //     usernameAndPassword: {},
  //     gitHub: {
  //       configFn: import { config } from "@server/auth/github.js",
  //       getUserFieldsFn: import { getUserFields } from "@server/auth/github.js"
  //     }
  //   },
  //   userEntity: User,
  //   externalAuthEntity: SocialAuth,
  //   onAuthFailedRedirectTo: "/login",
  //   onAuthSucceededRedirectTo: "/",
  // }
}

route RootRoute { path: "/", to: MainPage }
page MainPage {
  component: import Main from "@client/pages/MainPage"
}

route PromiseRoute { path: "/promise/create", to: PromisePage }
page PromisePage {
  // authRequired: true, // TODO: add user id when making promises
  component: import Promise from "@client/pages/PromisePage"
}

route PromiseListRoute { path: "/promise", to: PromiseListPage }
page PromiseListPage {
  component: import Promise from "@client/pages/PromiseListPage"
}

// route SignupRoute { path: "/signup", to: SignupPage }
// page SignupPage {
//   component: import Signup from "@client/pages/auth/SignupPage"
// }

// route LoginRoute { path: "/login", to: LoginPage }
// page LoginPage {
//   component: import Login from "@client/pages/auth/LoginPage"
// }

// entity User {=psl
//   id         Int      @id @default(autoincrement())
//   username   String   @unique
//   email      String?  @unique
//   password   String   // TODO: ask about password field being optional with social + usernameAndPassword auth methods
//   createdAt  DateTime  @default(now())
//   updatedAt  DateTime  @updatedAt

//   externalAuthAssociations  SocialAuth[]

//   promises  Promise[]
// psl=}

// entity SocialAuth {=psl
//   id          Int      @id @default(autoincrement())
//   userId      Int
//   provider    String
//   providerId  String
//   createdAt   DateTime  @default(now())
//   updatedAt   DateTime  @updatedAt

//   user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerId, userId])
// psl=}

entity Promise {=psl
    id          Int     @id @default(autoincrement())
    text        String
    isDone      Boolean @default(false)
    // authorId    Int

    // author  User  @relation(fields: [authorId], references: [id], onDelete: Cascade)

    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
psl=}

query getPromises {
  fn: import { getPromises } from "@server/promises/queries.js",
  entities: [Promise]
}

action makePromise {
  fn: import { makePromise } from "@server/promises/actions.js",
  entities: [Promise]
}